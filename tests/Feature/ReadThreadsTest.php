<?php

namespace Tests\Feature;

use App\Models\Channel;
use App\Models\Reply;
use App\Models\Thread;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use Tests\Traits\TestUser;

class ReadThreadsTest extends TestCase
{
    use RefreshDatabase, TestUser;

    /**
     * @var \Illuminate\Database\Eloquent\Collection|\Illuminate\Database\Eloquent\Model|mixed
     */
    private $threads;

    /**
     * @var Thread
     */
    private $ownedThread;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->threads = Thread::factory()->count(2)->create();
        $this->ownedThread = $this->threads->first();
    }


    /**
     * @test
     */
    public function a_user_can_view_all_threads()
    {
        $this->signIn()->get(route('threads.index'))
            ->assertStatus(200)
            ->assertSee($this->threads[0]->title)
            ->assertSee($this->threads[0]->body)
            ->assertSee($this->threads[0]->replies_count)
            ->assertSee($this->threads[1]->title)
            ->assertSee($this->threads[1]->replies_count)
            ->assertSee($this->threads[1]->body);
    }

    /**
     * @test
     */
    public function a_user_can_view_a_single_thread()
    {
        $thread = $this->ownedThread;
        $this->signIn()->get($thread->path())
            ->assertStatus(200)
            ->assertSee($thread->title)
            ->assertSee($thread->body);
    }

    /**
     * @test
     */
    public function a_user_can_read_a_given_thread_replies()
    {
        $thread = $this->ownedThread;
        $reply = Reply::factory()->create(['thread_id' => $thread->id]);

        $route = route('threads.show', ['thread' => $thread, 'channel' => $thread->channel->slug]);

        $this->signIn()->get($route)
            ->assertSee($reply->body);
    }


    /**
     * @test
     */
    public function a_user_can_filter_threads_by_a_channel()
    {
        $this->signIn();
        $channel = Channel::factory()->create();
        $threadInChannel = Thread::factory()->create(['channel_id' => $channel->id]);
        $threadNotInChannel = Thread::factory()->create();


        $this->get(route('threads.index', $channel))
            ->assertSee($threadInChannel->body)
            ->assertDontSee($threadNotInChannel->body);
    }

    /**
     * @test
     */
    public function a_user_can_filter_threads_by_any_username()
    {
        $this->signIn();
        $user = $this->user();
        $userThreads = Thread::factory()->count(3)->create(['user_id' => $user->id]);
        $someoneElseThreads = Thread::factory()->count(2)->create();


        $this->get(route('threads.index', ['by' => $user->name]))
            ->assertSee($userThreads->first()->body)
            ->assertSee($userThreads->last()->body)
            ->assertDontSee($someoneElseThreads->first()->body)
            ->assertDontSee($someoneElseThreads->last()->body);
    }

    /**
     * @test
     */
    public function a_user_can_filter_threads_by_popularity()
    {
        $this->signIn();
        $threadWithOneReply = Thread::factory()->create();
        Reply::factory()->create(['thread_id' => $threadWithOneReply->id]);
        $threadWithThreeReplies = Thread::factory()->create();
        Reply::factory()->count(3)->create(['thread_id' => $threadWithThreeReplies->id]);

        $replies = $this->getJson(
            route('threads.index', ['popularity' => 1]),
            ['test-json' => true]
        )->json();

        $this->assertEquals([3, 1, 0, 0], array_column($replies, 'replies_count'));
    }


}
