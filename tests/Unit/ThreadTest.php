<?php

namespace Tests\Unit;

use App\Models\Channel;
use App\Models\Reply;
use App\Models\Thread;
use App\Models\User;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use Tests\Traits\TestUser;

class ThreadTest extends TestCase
{
    use RefreshDatabase, TestUser;

    /**
     * @var Thread
     */
    private $thread;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->thread = Thread::factory()->create();
    }


    /** @test */
    public function it_has_a_creator()
    {
        $this->assertInstanceOf(User::class, $this->thread->creator);
    }

    /** @test */
    public function a_thread_can_have_replies()
    {
        $reply = Reply::factory()->create(['thread_id' => $this->thread->id]);

        $this->assertInstanceOf(Collection::class, $this->thread->replies);
        $this->assertTrue($reply->is($this->thread->replies->first()));
    }

    /** @test */
    public function a_reply_can_be_added_to_a_thread()
    {
        $previousRepliesCount = $this->thread->replies()->count();
        $replyBody = 'FooBar';
        $this->thread->addReply([
            'body' => $replyBody,
            'user_id' => $this->user()->id,
        ]);

        $this->assertEquals($this->thread->replies()->count(), $previousRepliesCount + 1);
    }

    /**
     * @test
     */
    public function a_thread_should_have_a_path()
    {
        $thread = Thread::factory()->create();
        $this->assertStringEndsWith("/threads/{$thread->channel->slug}/{$thread->id}", $thread->path());
    }


    /**
     * @test
     */
    public function a_thread_belongs_to_a_channel()
    {
        $thread = Thread::factory()->create();
        $this->assertInstanceOf(Channel::class, $thread->channel);
    }
}
